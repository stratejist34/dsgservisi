---
import { ViewTransitions } from 'astro:transitions';
import Header from '@components/common/Header.astro';
import Footer from '@components/common/Footer.astro';
import PhoneButton from '@components/common/PhoneButton';
import WhatsAppButton from '@components/common/WhatsAppButton';
import '@styles/global.css';
import '@styles/reveal.css';

interface Props {
  title: string;
  description: string;
  image?: string;
  noindex?: boolean;
}

const { 
  title, 
  description, 
  image = '/images/og-image.jpg',
  noindex = false 
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!DOCTYPE html>
<html lang="tr">
<head>
  <!-- Mobil algılama ile View Transitions -->
  <script is:inline>
    // Mobil cihaz algılama
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth <= 768;
    
    // Mobilde View Transitions devre dışı
    if (!isMobile) {
      // Sadece desktop'ta View Transitions yükle
      document.documentElement.style.setProperty('view-transition-name', 'root');
    } else {
      // Mobilde normal sayfa yüklemesi
      document.documentElement.style.setProperty('view-transition-name', 'none');
    }
  </script>
  
  <!-- Conditional View Transitions -->
  <ViewTransitions />
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="icon" type="image/webp" href="/images/icon.webp" />
  <link rel="icon" type="image/avif" href="/images/icon.avif" />
  <link rel="icon" type="image/png" href="/images/icon.png" />
  <link rel="canonical" href={canonicalURL} />
  
  {/* SEO Meta Tags */}
  <title>{title}</title>
  <meta name="description" content={description} />
  {noindex && <meta name="robots" content="noindex, nofollow" />}
  
  {/* Open Graph */}
  <meta property="og:type" content="website" />
  <meta property="og:url" content={canonicalURL} />
  <meta property="og:title" content={title} />
  <meta property="og:description" content={description} />
  <meta property="og:image" content={new URL(image, Astro.site)} />
  
  {/* Twitter Card */}
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:url" content={canonicalURL} />
  <meta name="twitter:title" content={title} />
  <meta name="twitter:description" content={description} />
  <meta name="twitter:image" content={new URL(image, Astro.site)} />
  
  {/* Critical Animations - MUST BE FIRST */}
  <script is:inline>
    (function() {
      const css = `
        @keyframes bounce-spring {
          0%, 100% {
            transform: translateY(0) scale(1);
          }
          50% {
            transform: translateY(-15%) scale(1.02);
          }
        }
        @keyframes ring-rotate {
          0% { transform: rotate(-8deg); }
          15% { transform: rotate(8deg); }
          30% { transform: rotate(-8deg); }
          45% { transform: rotate(8deg); }
          60%, 100% { transform: rotate(0deg); }
        }
        @keyframes glow-pulse {
          0%, 100% {
            box-shadow: 0 0 20px rgba(26, 156, 176, 0.4), 0 0 40px rgba(26, 156, 176, 0.2);
          }
          50% {
            box-shadow: 0 0 40px rgba(26, 156, 176, 0.8), 0 0 80px rgba(26, 156, 176, 0.4);
          }
        }
        @keyframes gradient-shift {
          0%, 100% { background-position: 0% 50%; }
          50% { background-position: 100% 50%; }
        }
        @keyframes rotate-continuous {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
        @keyframes float-smooth {
          0%, 100% { transform: translateY(0px) translateX(0px); }
          33% { transform: translateY(-8px) translateX(3px); }
          66% { transform: translateY(-4px) translateX(-3px); }
        }
        @keyframes ripple-expand {
          0% { transform: scale(0); opacity: 1; }
          100% { transform: scale(4); opacity: 0; }
        }
      `;
      const style = document.createElement('style');
      style.id = 'critical-animations';
      style.textContent = css;
      document.head.appendChild(style);
    })();
  </script>

  {/* Preload Critical Resources */}
      <link rel="dns-prefetch" href="https://www.googletagmanager.com" />
      <link rel="preload" href="/images/hero-bg.jpg" as="image" type="image/jpeg" fetchpriority="high" />
  
  {/* Critical CSS */}
  <style is:inline>
    html {
      scroll-behavior: smooth;
      scroll-padding-top: 80px;
    }
    body {
      font-family: system-ui, -apple-system, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
      background-color: #ffffff;
      color: #1a202c; /* gray-900 */
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      text-rendering: optimizeLegibility;
      overflow-x: hidden;
      width: 100%;
      min-width: 320px;
    }
    .container {
      margin-left: auto;
      margin-right: auto;
      padding-left: 1rem; /* px-4 */
      padding-right: 1rem; /* px-4 */
      max-width: 1280px; /* max-w-7xl */
      width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      font-family: system-ui, -apple-system, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
      font-weight: 600; /* font-semibold */
    }
    h1 {
      font-size: 1.875rem; /* text-3xl */
      line-height: 2.25rem; /* leading-9 */
      font-weight: 700; /* font-bold */
    }
    @media (min-width: 768px) {
      .container {
        padding-left: 1.5rem; /* sm:px-6 */
        padding-right: 1.5rem; /* sm:px-6 */
      }
      h1 {
        font-size: 2.25rem; /* md:text-4xl */
        line-height: 2.5rem; /* md:leading-10 */
      }
    }
    @media (min-width: 1024px) {
      .container {
        padding-left: 2rem; /* lg:px-8 */
        padding-right: 2rem; /* lg:px-8 */
      }
      h1 {
        font-size: 2.25rem; /* lg:text-4xl */
        line-height: 2.5rem; /* lg:leading-10 */
      }
    }

    /* Premium ama hafif geçiş */
    @keyframes page-enter {
      from {
        opacity: 0;
        transform: translateY(16px);
      }
    }

    ::view-transition-old(root) {
      animation: 0.25s ease-out both fade-out;
    }

    ::view-transition-new(root) {
      animation: 0.28s cubic-bezier(0.4, 0, 0.2, 1) both page-enter;
    }

    @keyframes fade-out {
      to { opacity: 0; }
    }

    @media (prefers-reduced-motion: reduce) {
      html { scroll-behavior: auto; }
      ::view-transition-old(root),
      ::view-transition-new(root) {
        animation: none;
      }
    }

    @media (max-width: 768px) {
      ::view-transition-old(root),
      ::view-transition-new(root) {
        animation: none !important;
        opacity: 1 !important;
        transform: none !important;
      }
      
      /* Mobilde View Transitions tamamen devre dışı */
      html {
        view-transition-name: none !important;
      }
    }
  </style>
  
  {/* Google Search Console Verification */}
  {import.meta.env.PUBLIC_GSC_VERIFICATION && (
    <meta name="google-site-verification" content={import.meta.env.PUBLIC_GSC_VERIFICATION} />
  )}
  
      
      <slot name="head" />
</head>
<body class="smooth-scroll">
  <Header transition:persist />
  
  <main class="pt-20">
    <slot />
  </main>
  
      <Footer transition:persist />
  
      {/* Floating Buttons */}
      <PhoneButton client:load />
      <WhatsAppButton client:load />

      {/* Auto Reveal (once) - inline to ensure it runs in build/preview */}
      <script is:inline>
        (function(){
          try{
            var opts = { root: null, rootMargin: '0px 0px -10% 0px', threshold: 0.15 };
            var onReveal = function(el){ el.classList.add('reveal--in'); };
            var io = new IntersectionObserver(function(entries, obs){
              for (var i=0;i<entries.length;i++){
                var e = entries[i];
                if (e.isIntersecting){ onReveal(e.target); obs.unobserve(e.target); }
              }
            }, opts);
            document.querySelectorAll('[data-reveal]').forEach(function(el){ io.observe(el); });
          }catch(e){ /* no-op */ }
        })();
      </script>

  {/* Google Analytics - Lazy loaded after interaction */}
  {import.meta.env.PUBLIC_GA_ID && (
    <script is:inline define:vars={{ gaId: import.meta.env.PUBLIC_GA_ID }}>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', gaId);
      
      // Lazy load GA script after user interaction
      let gaLoaded = false;
      function loadGA() {
        if (gaLoaded) return;
        gaLoaded = true;
        const script = document.createElement('script');
        script.async = true;
        script.src = `https://www.googletagmanager.com/gtag/js?id=${gaId}`;
        document.head.appendChild(script);
      }
      
      // Load on user interaction or after 3 seconds
      ['mousedown', 'touchstart', 'scroll', 'keydown'].forEach(event => {
        window.addEventListener(event, loadGA, { once: true, passive: true });
      });
      setTimeout(loadGA, 3000);
    </script>
  )}
</body>
</html>

